class Table {
  constructor() {
    this.data = [];
    this.autoInc = 1;
  }
  add(obj) {
    const id = this.autoInc++;
    const row = { id, ...obj };
    this.data.push(row);
    return Promise.resolve(id);
  }
  bulkAdd(arr) {
    arr.forEach(o => {
      const id = this.autoInc++;
      this.data.push({ id, ...o });
    });
    return Promise.resolve();
  }
  where(query) {
    if (typeof query === 'object') {
      const keys = Object.keys(query);
      return {
        first: () => Promise.resolve(this.data.find(r => keys.every(k => r[k] === query[k]))),
        toArray: () => Promise.resolve(this.data.filter(r => keys.every(k => r[k] === query[k]))),
        equals: val => ({ toArray: () => Promise.resolve(this.data.filter(r => r[keys[0]] === val)) })
      };
    }
    return {
      equals: val => ({ toArray: () => Promise.resolve(this.data.filter(r => r[query] === val)) })
    };
  }
  orderBy(field) {
    return {
      reverse: () => ({
        toArray: () => Promise.resolve([...this.data].sort((a,b)=> (a[field]>b[field]? -1:1)))
      })
    };
  }
  update(id, patch) {
    const row = this.data.find(r => r.id === id);
    if (row) Object.assign(row, patch);
    return Promise.resolve();
  }
  put(obj) {
    const idx = this.data.findIndex(r => r.key === obj.key);
    if (idx >= 0) {
      this.data[idx] = obj;
    } else {
      this.data.push(obj);
    }
    return Promise.resolve();
  }
  get(key) {
    return Promise.resolve(this.data.find(r => r.key === key));
  }
}

export default class Dexie {
  constructor() {
    this.lots = new Table();
    this.items = new Table();
    this.settings = new Table();
  }
  version() {
    return { stores: () => this };
  }
}
